{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/abstraction","result":{"data":{"brainNote":{"slug":"abstraction","title":"Abstraction","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Abstraction\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"What's Abstraction?\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstraction\"), \" is a form of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/pattern-recognition\"\n  }), \"Pattern Recognition\"), \". Rather than an exact match between two things, an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstraction\"), \" is a pattern in which only some of the details of each thing match\", \"\\u2014\", \"the dissimilarities are ignored. A good (or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"useful\"), \") \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstraction\"), \" preserves shared qualities or details that are meaningful. A poor (or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"unhelpful\"), \") \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstraction\"), \" creates links between unimportant shared details.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Abstraction\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/reification\"\n  }), \"Reification\"), \" are inverse counterparts.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/CFiggers/images-calebsnotes/master/Abstraction%20Diagram.svg\",\n    \"alt\": \"Abstraction diagram\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Thinking","slug":"thinking","childMdx":{"excerpt":"Thinking carefully is important. Here's some stuff I've learned: Think Small Thoughts Abstraction  and  Reification Composition  andâ€¦"}}],"outboundReferenceNotes":[{"title":"Pattern Recognition","slug":"pattern-recognition","childMdx":{"excerpt":""}},{"title":"Reification","slug":"reification","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"Caleb's Notes"}}},"pageContext":{"slug":"abstraction"}},"staticQueryHashes":[]}